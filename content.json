{"pages":[],"posts":[{"title":"Algorithm Learning Note01: Introduction","text":"My learning notes of COMPLEXITY OF ALGORITHMS course. Overview Algorithm Analysis Big-O Notation Big Omega and Big Theta Notation Online Algorithm ➡️Click here for full screen review. 🚫 The assets (images, screenshots, …) used here are from the lecture notes of University of Liverpool.🚫 Only used for study, no commercial use.","link":"/2020/05/06/Algorithm-Learning-Note01-Introduction/"},{"title":"Algorithm Learning Note02: Search Tree","text":"My learning notes of COMPLEXITY OF ALGORITHMS course. Overview Rooted Trees Binary Trees Depth of a Node Height of a Tree Traversal of Trees Binary Search Trees AVL Trees (2,4) Trees ➡️Click here for full screen review. 🚫 The assets (images, screenshots, …) used here are from the lecture notes of University of Liverpool.🚫 Only used for study, no commercial use.","link":"/2020/05/07/Algorithm-Learning-Note02-Search-Tree/"},{"title":"Algorithm Learning Note04: Greedy","text":"My learning notes of COMPLEXITY OF ALGORITHMS course. Overview Fractional Knapsack Problem(FKP) Interval Scheduling Task Scheduling Clustering ➡️Click here for full screen review. 🚫 The assets (images, screenshots, …) used here are from the lecture notes of University of Liverpool.🚫 Only used for study, no commercial use.","link":"/2020/05/09/Algorithm-Learning-Note04-Greedy/"},{"title":"Algorithm Learning Note05: Divide and Conquer","text":"My learning notes of COMPLEXITY OF ALGORITHMS course. Overview General Case Substitution Method Master Method Fast Multiplication of Integers Matrix Multiplication ➡️Click here for full screen review. 🚫 The assets (images, screenshots, …) used here are from the lecture notes of University of Liverpool.🚫 Only used for study, no commercial use.","link":"/2020/05/12/Algorithm-Learning-Note05-Divide-and-Conquer/"},{"title":"Algorithm Learning Note06: Dynamic Programming","text":"My learning notes of COMPLEXITY OF ALGORITHMS course. Overview Fibonacci Numbers — Recursive Fibonacci Numbers — Dynamic Programming {0, 1} Knapsack Problem Weighted Interval Scheduling ➡️Click here for full screen review. 🚫 The assets (images, screenshots, …) used here are from the lecture notes of University of Liverpool.🚫 Only used for study, no commercial use.","link":"/2020/05/13/Algorithm-Learning-Note06-Dynamic-Programming/"},{"title":"Algorithm Learning Note07: Graphs","text":"My learning notes of COMPLEXITY OF ALGORITHMS course. Overview Terminology Theorems Proof Adjacency List Adjacency Matrix Digraphs Graph Search Method — DFS and BFS Single-Source Shortest Paths Dijkstra’s Algorithm Others ➡️Click here for full screen review. 🚫 The assets (images, screenshots, …) used here are from the lecture notes of University of Liverpool.🚫 Only used for study, no commercial use.","link":"/2020/05/16/Algorithm-Learning-Note07-Graphs/"},{"title":"Algorithm Learning Note03: Sorting","text":"My learning notes of COMPLEXITY OF ALGORITHMS course. Overview Priority Queues Heap MergeSort Counting Inversions QuickSort Randomized QuickSort Bucket Sort Radix Sorting ➡️Click here for full screen review. 🚫 The assets (images, screenshots, …) used here are from the lecture notes of University of Liverpool.🚫 Only used for study, no commercial use.","link":"/2020/05/08/Algorithm-Learning-Note03-Sorting/"},{"title":"Algorithm Learning Note08: Network Flow","text":"My learning notes of COMPLEXITY OF ALGORITHMS course. Overview Basics Ford-Fulkerson Algorithm Bipartite Graphs ➡️Click here for full screen review. 🚫 The assets (images, screenshots, …) used here are from the lecture notes of University of Liverpool.🚫 Only used for study, no commercial use.","link":"/2020/05/17/Algorithm-Learning-Note08-Network-Flow/"},{"title":"Algorithm Learning Note09: Number Theory and Cryptography","text":"My learning notes of COMPLEXITY OF ALGORITHMS course. Overview Divisibility Prime Numbers Fundamental Theorem of Arithmetic Geatest Common Divisor Euclid’s Algorithm Extended Euclidean Algorithm RSA Method Digital Signatures Fast Exponentiation ➡️Click here for full screen review. 🚫 The assets (images, screenshots, …) used here are from the lecture notes of University of Liverpool.🚫 Only used for study, no commercial use.","link":"/2020/05/19/Algorithm-Learning-Note09-Number-Theory-and-Cryptography/"},{"title":"Algorithm Learning Note10: NP Problems","text":"My learning notes of COMPLEXITY OF ALGORITHMS course. Overview Decision/Optimization Problems Complexity Class P Complexity Class NP Boolean Circuits Class co-NP Polynomial-time Reducibility NP-hardness NP-complete Conjunctive Normal Form {0,1} Integer Programming Subset Sum 3-Coloring of Graphs ➡️Click here for full screen review. 🚫 The assets (images, screenshots, …) used here are from the lecture notes of University of Liverpool.🚫 Only used for study, no commercial use.","link":"/2020/05/19/Algorithm-Learning-Note10-NP-Problems/"},{"title":"Biocomputation - ANN Learning Note01: McCulloch-Pitts Neuron","text":"My learning notes of BIOCOMPUTATION course. Overview Rule of McCulloch-Pitts Neuron Logical Function Flow Chart Register Cell and Memory Cell Ideological Problems of MP-Model ➡️Click here for full screen review. 🚫 The assets (images, screenshots, …) used here are from the lecture notes of University of Liverpool.🚫 Only used for study, no commercial use.","link":"/2020/10/31/Biocomputation-ANN-Learning-Note01-McCulloch-Pitts-Neuron/"},{"title":"Biocomputation - ANN Learning Note02: Hebb’s Rule","text":"My learning notes of BIOCOMPUTATION course. Overview Hebb’s Rule Formalisation Flow Chart ➡️Click here for full screen review. 🚫 The assets (images, screenshots, …) used here are from the lecture notes of University of Liverpool.🚫 Only used for study, no commercial use.","link":"/2020/11/01/Biocomputation-ANN-Learning-Note02-Hebb%E2%80%99s-Rule/"},{"title":"Biocomputation - ANN Learning Note03: Perceptron","text":"My learning notes of BIOCOMPUTATION course. Overview Error-correction Rule Perceptron Learning Rule The Network Performance Perceptron Convergence Theorem Formalisation and Flow Chart Limitations: XOR problem Linear Separability ➡️Click here for full screen review. 🚫 The assets (images, screenshots, …) used here are from the lecture notes of University of Liverpool.🚫 Only used for study, no commercial use.","link":"/2020/11/01/Biocomputation-ANN-Learning-Note03-Perceptron/"},{"title":"React Learning: Clean up in useEffect hook","text":"React is a mature web framework developed by facebook. Memory LeakIt sometimes happened that React reports this bug in the console: Warning: Can’t perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.That is because the component is going to unmount while some states are still waiting for updated. The way to fix this is to set a flag, for example, called mounted, and do the state update only when mounted is true. Finally, set it to false when the component is unmount. Clean Up In useEffectuseEffect takes a second function which returns a clean up function: useEffect(() =&gt; { // do subscription or state update ... return () =&gt; { // clean up ... }; });The return function runs when the component is going to unmount. A Better Way: Use HooksCustom a hook to handle the clean up function: function useIsMountedRef(){ const isMountedRef = useRef(null); useEffect(() =&gt; { isMountedRef.current = true; return () =&gt; isMountedRef.current = false; }); return isMountedRef; }and usage: function SomeComponent() { const isMountedRef = useIsMountedRef(); useEffect(() =&gt; { // do something ... if(isMountedRef.current){ // do subscription or state update ... } // do something ... }, [isMountedRef]); return ( // return something ... ); } ReferenceS. B. Giat, “React state update on an unmounted component.” [Online]. Available: https://www.debuggr.io/react-update-unmounted-component/.","link":"/2020/06/16/React-Learning-Clean-up-in-useEffect-hook/"},{"title":"React Learning: Router","text":"React is a mature web framework developed by facebook. Installationnpm install react-router-domPrimary Components routers, like &lt;BrowserRouter&gt; and &lt;HashRouter&gt; route matchers, like &lt;Route&gt; and &lt;Switch&gt; and navigation, like &lt;Link&gt;, &lt;NavLink&gt;, and &lt;Redirect&gt; &lt;BrowserRouter&gt; and &lt;HashRouter&gt;BrowserRouter requires the server to be configured correctly, otherwise will show 404 not found page. Usage is to wrap the top-level &lt;App&gt; element in a router: ReactDOM.render( &lt;BrowserRouter&gt; &lt;App /&gt; &lt;/BrowserRouter&gt;, document.getElementById(&quot;root&quot;) );Route MatchersThere are two route matching components: Switch and Route: function App() { return ( &lt;Switch&gt; {/* If the current URL is /about, this route is rendered while the rest are ignored */} &lt;Route path=&quot;/about&quot;&gt; &lt;About /&gt; &lt;/Route&gt; {/* Note how these two routes are ordered. The more specific path=&quot;/contact/:id&quot; comes before path=&quot;/contact&quot; so that route will render when viewing an individual contact */} &lt;Route path=&quot;/contact/:id&quot;&gt; &lt;Contact /&gt; &lt;/Route&gt; &lt;Route path=&quot;/contact&quot;&gt; &lt;AllContacts /&gt; &lt;/Route&gt; {/* If none of the previous routes render anything, this route acts as a fallback. Important: A route with path=&quot;/&quot; will *always* match the URL because all URLs begin with a /. So that&apos;s why we put this one last of all */} &lt;Route path=&quot;/&quot;&gt; &lt;Home /&gt; &lt;/Route&gt; &lt;/Switch&gt; ); } strict matching: &lt;Route strict path=&quot;/one/&quot;&gt; &lt;About /&gt; &lt;/Route&gt; path location.pathname matches /one/ /one no /one/ /one/ yes /one/ /one/two yes exact and strict matching: &lt;Route exact strict path=&quot;/one&quot;&gt; &lt;About /&gt; &lt;/Route&gt; path location.pathname matches /one /one yes /one /one/ no /one /one/two no NavigationThe difference between &lt;Link&gt; and &lt;NavLink&gt; is that &lt;NavLink&gt; has an “active” property. &lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt; // &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt; &lt;NavLink to=&quot;/react&quot; activeClassName=&quot;hurray&quot;&gt; React &lt;/NavLink&gt; &lt;Redirect to=&quot;/login&quot; /&gt;Check React Router documentation for more details: https://reacttraining.com/react-router/web/guides/quick-start","link":"/2020/06/08/React-Learning-Router/"},{"title":"React Learning: Using styled-components","text":"React is a mature web framework developed by facebook. Installationnpm install --save styled-componentsStyled Normal HTML Elementfor example, div tag: const StyledDiv = styled.div` background: orange; `; render( &lt;StyledDiv&gt; Hello World! &lt;/StyledDiv&gt; );Extend Elementfor example, StyledDiv tag above: const SuperStyledDiv = styled(StyledDiv)` background: red; `; render( &lt;SuperStyledDiv&gt; Hello World! &lt;/SuperStyledDiv&gt; );Check styled-components documentation for more details: https://styled-components.com/docs/basics","link":"/2020/06/09/React-Learning-Using-styled-components/"},{"title":"React-Useful-Hooks-useDimension","text":"This hook helps us get the width and height of an element.Source: From Online Usage// ref is the reference to the element whose height and width is required const divRef = useRef(null); const { height, width } = useDimension(divRef); ... &lt;div ref={divRef}&gt;Hookimport { useRef, useState, useEffect } from &quot;react&quot;; import ResizeObserver from &quot;resize-observer-polyfill&quot;; const initialState = { width: 0, height: 0 }; // ref is the reference to the element whose height and width is required // const divRef = useRef(null); // const { height, width } = useDimension(divRef); // &lt;div ref={divRef}&gt; const useDimension = (ref) =&gt; { const [dimensions, setdDimensions] = useState(initialState); const resizeObserverRef = useRef(null); useEffect(() =&gt; { resizeObserverRef.current = new ResizeObserver((entries = []) =&gt; { entries.forEach((entry) =&gt; { const { width, height } = entry.contentRect; setdDimensions({ width, height }); }); }); if (ref.current) resizeObserverRef.current.observe(ref.current); return () =&gt; { if (resizeObserverRef.current) resizeObserverRef.current.disconnect(); }; }, [ref]); return dimensions; }; export default useDimension;","link":"/2020/07/07/React-Useful-Hooks-useDimension/"},{"title":"React Learning: Functional Component and Hooks","text":"React is a mature web framework developed by facebook. Functional ComponentIn functional component, useState() is used to declare a state, and return method is used to render UI: const MyComponent = (props) =&gt; { const [theState, setState] = useState(0); const someFunction = () =&gt; { // do something } return ( &lt;div&gt;{theState}&lt;/div&gt; ); };Initialize the state by passing parameter in the useState(). In this case, theState is initialized with 0. Here useState() is a kind of hook, particularly used to declare the state. HooksComponent is designed to reuse UI, and hook is designed to reuse the logic.There are many other hooks in React, such as: useEffect The lifecycle in Class Component(e.g. componentDidMount and componentDidUpdate method) is replaced by useEffect hook in Functional Component. The function passed in useEffect will run after each render if the second parameter in useEffect is null. Otherwise, you can pass an array as the second parameter, then useEffect will only re-render the component if and only if the variables in array are changed. For example: useEffect(() =&gt; { // get next page content }, [pageNo]); In this case, useEffect will only run when pageNo is changed. If the second parameter is an empty array, then useEffect will only run when the component is mounted and unmounted: useEffect(() =&gt; { // behave like componentDidMount }, []); Besides, you can return something from useEffect to clean up your code in case memory leak: useEffect(() =&gt; { const subscription = props.source.subscribe(); return () =&gt; { subscription.unsubscribe(); }; }, []); However, considering the performance problem, the operations in useEffect is asynchronous. Assume the count in the following example is 0 initially: useEffect(() =&gt; { console.log(count); // ---&gt; 0 setCount(count+1); console.log(count); // ---&gt; still 0 }, []); Finally, useEffect is often used to fetch API. useContext useReducer useRef…… Check React documentation for more details: https://reactjs.org/docs/hooks-reference.html","link":"/2020/06/08/React-Learning-Functional-Component-and-Hooks/"},{"title":"React Useful Hooks: useMedia","text":"This hook makes it super easy to utilize media queries in your component logic.Source: https://usehooks.com/useMedia Usagefunction App() { const columnCount = useMedia( // Media queries [&apos;(min-width: 1500px)&apos;, &apos;(min-width: 1000px)&apos;, &apos;(min-width: 600px)&apos;], // Column counts (relates to above media queries by array index) [5, 4, 3], // Default column count 2 ); // Create array of column heights (start at 0) let columnHeights = new Array(columnCount).fill(0); // Create array of arrays that will hold each column&apos;s items let columns = new Array(columnCount).fill().map(() =&gt; []); data.forEach(item =&gt; { // Get index of shortest column const shortColumnIndex = columnHeights.indexOf(Math.min(...columnHeights)); // Add item columns[shortColumnIndex].push(item); // Update height columnHeights[shortColumnIndex] += item.height; }); // Render columns and items return ( &lt;div className=&quot;App&quot;&gt; &lt;div className=&quot;columns is-mobile&quot;&gt; {columns.map(column =&gt; ( &lt;div className=&quot;column&quot;&gt; {column.map(item =&gt; ( &lt;div className=&quot;image-container&quot; style={{ // Size image container to aspect ratio of image paddingTop: (item.height / item.width) * 100 + '%' }} &gt; &lt;img src={item.image} alt=&quot;&quot; /&gt; &lt;/div&gt; ))} &lt;/div&gt; ))} &lt;/div&gt; &lt;/div&gt; ); }Hookimport { useState, useEffect } from &apos;react&apos;; function useMedia(queries, values, defaultValue) { // Array containing a media query list for each query const mediaQueryLists = queries.map(q =&gt; window.matchMedia(q)); // Function that gets value based on matching media query const getValue = () =&gt; { // Get index of first media query that matches const index = mediaQueryLists.findIndex(mql =&gt; mql.matches); // Return related value or defaultValue if none return typeof values[index] !== &apos;undefined&apos; ? values[index] : defaultValue; }; // State and setter for matched value const [value, setValue] = useState(getValue); useEffect(() =&gt; { // Event listener callback // Note: By defining getValue outside of useEffect we ensure that it has ... // ... current values of hook args (as this hook callback is created once on mount). const handler = () =&gt; setValue(getValue); // Set a listener for each media query with above handler as callback. mediaQueryLists.forEach(mql =&gt; mql.addListener(handler)); // Remove listeners on cleanup return () =&gt; mediaQueryLists.forEach(mql =&gt; mql.removeListener(handler)); }, [] // Empty array ensures effect is only run on mount and unmount ); return value; }","link":"/2020/06/08/React-Useful-Hooks-useMedia/"},{"title":"React Learning: Build My First Single Page Application","text":"React is a mature web framework developed by facebook. Why Use ReactBecause the great reusable feature, everything in React is a component. What is ComponentComponent looks like the object in object oriented programming. As we all know, an object has an constructor, some attributes and methods, component is almost the same. Each component has some properties(called props), its own attributes(called states), and also some methods can be written in the component. Besides, each component needs to render its UI by using JSX or a HTML snippet. Props and StatesProps are something on the tag: &lt;User name=&quot;myName&quot; age=&quot;myAge&quot; /&gt;here name and age are the props of User component. States are something inside the component: const User = (props) =&gt; { const [nameState, setName] = useState(props.name); // &lt;--- state const [ageState, setAge] = useState(props.age); // &lt;--- state return ( &lt;div&gt;name: {nameState}, age: {ageState}&lt;/div&gt; // &lt;--- name: myName, age: myAge ); };the props on tag(e.g. name, age) can be used to initialize the state(like constructor in object), and it is also a good way to pass variables between each component. nameState and ageState are the name of those states, setName and setAge are the setter method of those states. Class Component and Functional ComponentThey are two different ways to write components in the code. However, because of the new features, hook, in the functional components, it is recommended to write functional components because hook makes the code more reusable and flexible. SPA — Single Page ApplicationSPA is the application that there is only one entry(index.html). Router is often used to switch different pages. Using create-react-app to create a new single page application: npx create-react-app my-app cd my-app npm startVirtual DOM in ReactThe core mechanism in React engine is render. During each render, React will compare the real DOM and its own DOM(or called Virtual DOM) and check if there is any update. If it is, then React will rerender this particular updated part. Take create-react-app as example, in public/index.html, there is a div tag which declares the root of virtual DOM: &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;and in src/index.js, there is a render method of ReactDOM: ReactDOM.render( &lt;App /&gt;, document.getElementById(&quot;root&quot;) );This render method means the App component will be rendered in the element whose id is root. Check React documentation for more details: https://reactjs.org/docs/hello-world.html","link":"/2020/06/08/React-Learning-Build-My-First-Single-Page-Application/"},{"title":"React Useful Hooks: useScript","text":"This hook makes it super easy to dynamically load an external script and know when its loaded.Source: https://usehooks.com/useScript Usagefunction App() { const [loaded, error] = useScript( &apos;https://pm28k14qlj.codesandbox.io/test-external-script.js&apos; ); return ( &lt;div&gt; &lt;div&gt; Script loaded: &lt;b&gt;{loaded.toString()}&lt;/b&gt; &lt;/div&gt; {loaded &amp;&amp; !error &amp;&amp; ( &lt;div&gt; Script function call response: &lt;b&gt;{TEST_SCRIPT.start()}&lt;/b&gt; &lt;/div&gt; )} &lt;/div&gt; ); }Hookimport { useState, useEffect } from &apos;react&apos;; let cachedScripts = []; function useScript(src) { // Keeping track of script loaded and error state const [state, setState] = useState({ loaded: false, error: false }); useEffect(() =&gt; { // If cachedScripts array already includes src that means another instance ... // ... of this hook already loaded this script, so no need to load again. if (cachedScripts.includes(src)) { setState({ loaded: true, error: false }); } else { cachedScripts.push(src); // Create script let script = document.createElement(&apos;script&apos;); script.src = src; script.async = true; // Script event listener callbacks for load and error const onScriptLoad = () =&gt; { setState({ loaded: true, error: false }); }; const onScriptError = () =&gt; { // Remove from cachedScripts we can try loading again const index = cachedScripts.indexOf(src); if (index &gt;= 0) cachedScripts.splice(index, 1); script.remove(); setState({ loaded: true, error: true }); }; script.addEventListener(&apos;load&apos;, onScriptLoad); script.addEventListener(&apos;error&apos;, onScriptError); // Add script to document body document.body.appendChild(script); // Remove event listeners on cleanup return () =&gt; { script.removeEventListener(&apos;load&apos;, onScriptLoad); script.removeEventListener(&apos;error&apos;, onScriptError); }; } }, [src] // Only re-run effect if script src changes ); return [state.loaded, state.error]; }","link":"/2020/06/08/React-Useful-Hooks-useScript/"},{"title":"React Recommended UI Library","text":"Some great UI libraries. Components Ant Design: https://ant.design/docs/react/introduce-cn Element: https://elemefe.github.io/element-react/#/zh-CN/quick-start Bootstrap: https://react-bootstrap.github.io/getting-started/introduction/ Material UI: https://material-ui.com/zh/getting-started/installation/ Icons Ant Design: https://ant.design/components/icon-cn/ Font Awesome: https://fontawesome.com","link":"/2020/06/08/React-Recommended-UI-Library/"},{"title":"在Ubuntu 18.04版本上安装LAMP","text":"这篇博客将介绍如何搭建基于LAMP的web服务器。 什么是LAMP？LAMP是运用了Linux，Apache，MySQL，PHP技术的统称，被广泛用于搭建web服务器。 在Ubuntu系统上，可以通过apt（一种Ubuntu的包管理工具）来安装所需要的软件。 Apache 更新apt并安装Apache： sudo apt update sudo apt install apache2 MySQL 安装MySQL服务器： sudo apt install mysql-server 安装MySQL安全脚本： sudo mysql_secure_installation PHP 安装PHP及其相关mysql包： sudo apt install php libapache2-mod-php php-mysql 查看服务器是否支持index.php界面： sudo nano /etc/apache2/mods-enabled/dir.conf 重启服务器： sudo systemctl restart apache2 配置虚拟主机（Virtual Hosts）如果想在一个服务器上设置多个域名的话，推荐使用设置虚拟主机来实现。 默认情况下，服务器会返回储存在/var/www/html文件夹里的网页文件，但是对于多个域名的话，显然对每一个域名都各配置一个文件夹来储存他们各自的文件是一个比较合理的办法。 以67373upup.com为例： 首先建立对应目录： sudo mkdir /var/www/67373upup.com 接下来使用$USER环境变量分配目录的所有权： sudo chown -R $USER:$USER /var/www/67373upup.com 使用chmod 755命令设置权限： sudo chmod -R 755 /var/www/67373upup.com chmod 755 (chmod a+rwx,g-w,o-w) means: Read Write Execute User ☑️ ☑️ ☑️ Group ☑️ 🚫 ☑️ Others ☑️ 🚫 ☑️ 建立相关的配置文件： sudo nano /etc/apache2/sites-available/67373upup.com.conf 并且填入对应信息： &lt;VirtualHost *:80&gt; ServerName 67373upup.com ServerAlias www.67373upup.com DocumentRoot /var/www/67373upup.com ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined &lt;/VirtualHost&gt; 然后使这个文件生效（enable）： sudo a2ensite 67373upup.com.conf 并且使默认配置失效（disable）： sudo a2dissite 000-default.conf 检查是否有错误： sudo apache2ctl configtest 如果显示Syntax OK则表示没有错误。 最后重启： sudo systemctl restart apache2 测试：访问http://www.67373upup.com Reference[1] M. Drake, “How To Install Linux, Apache, MySQL, PHP (LAMP) stack on Ubuntu 18.04,” DigitalOcean, 27-Apr-2018. [Online]. Available: https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-ubuntu-18-04.","link":"/2020/04/29/%E5%9C%A8Ubuntu-18-04%E7%89%88%E6%9C%AC%E4%B8%8A%E5%AE%89%E8%A3%85LAMP/"},{"title":"在Ubuntu-18-04版本上为Apache添加SSL证书","text":"这篇博客将介绍如何在Ubuntu 18.04版本上为Apache添加SSL证书以及将HTTP的访问重定向到HTTPS。 SSL介绍SSL是Secure Sockets Layer的缩写，是一种用于安全加密通信的网络协议。 为Apache添加强加密设置首先在/etc/apache2/conf-available目录下新建一个名为ssl-params.conf的文件： sudo nano /etc/apache2/conf-available/ssl-params.conf并在该文件里添加相应配置： SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH SSLProtocol All -SSLv2 -SSLv3 -TLSv1 -TLSv1.1 SSLHonorCipherOrder On # Disable preloading HSTS for now. You can use the commented out header line that includes # the &quot;preload&quot; directive if you understand the implications. # Header always set Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot; Header always set X-Frame-Options DENY Header always set X-Content-Type-Options nosniff # Requires Apache &gt;= 2.4 SSLCompression off SSLUseStapling on SSLStaplingCache &quot;shmcb:logs/stapling-cache(150000)&quot; # Requires Apache &gt;= 2.4.11 SSLSessionTickets Off然后保存。 修改默认的Apache SSL虚拟主机文件如果你有自己的虚拟主机配置文件，只需把下面的default替换成相应的文件名。 首先备份原来的配置文件： sudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/default-ssl.conf.bak 然后打开并配置新的文件： sudo nano /etc/apache2/sites-available/default-ssl.conf 修改并保存相应配置： &lt;IfModule mod_ssl.c&gt; &lt;VirtualHost _default_:443&gt; ServerName server_domain_or_IP DocumentRoot /var/www/html ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined SSLEngine on SSLCertificateFile /etc/ssl/certs/domain.pem SSLCertificateKeyFile /etc/ssl/private/domain.key &lt;FilesMatch &quot;\\.(cgi|shtml|phtml|php)$&quot;&gt; SSLOptions +StdEnvVars &lt;/FilesMatch&gt; &lt;Directory /usr/lib/cgi-bin&gt; SSLOptions +StdEnvVars &lt;/Directory&gt; &lt;/VirtualHost&gt; &lt;/IfModule&gt; 1. 其中SSLCertificateFile和SSLCertificateKeyFile是相应的SSL证书和密钥。 2. 如果是为虚拟主机配置SSL，则需要修改DocumentRoot为该虚拟主机的网页文件目录。 将HTTP重定向到HTTPS同样，对于虚拟主机，需要把下面的default替换成相应的文件名。 首先打开相应配置文件： sudo nano /etc/apache2/sites-available/000-default.conf并添加重定向指令Redirect： &lt;VirtualHost *:80&gt; . . . Redirect &quot;/&quot; &quot;https://your_domain_or_IP/&quot; . . . &lt;/VirtualHost&gt;最后保存。 如果想设置成永久重定向，则需要将命令Redirect改为Redirect permanent。 调整防火墙使其接受HTTPS连接sudo ufw allow &apos;Apache Full&apos;使所有配置生效 使mod_ssl``和mod_headers生效： sudo a2enmod ssl sudo a2enmod headers 使配置SSL的虚拟主机生效： 视个人情况更改default文件名 sudo a2ensite default-ssl 使ssl-params.conf文件生效： sudo a2enconf ssl-params 检查有无句法错误： sudo apache2ctl configtest 最后重启Apache： sudo systemctl restart apache2 测试以HTTP或HTTPS访问该域名即可。 Reference[1] B. Boucheron, “How To Create a Self-Signed SSL Cert for Apache in Ubuntu 18.04,” DigitalOcean, 05-Jul-2018. [Online]. Available: https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04.","link":"/2020/04/29/%E5%9C%A8Ubuntu-18-04%E7%89%88%E6%9C%AC%E4%B8%8A%E4%B8%BAApache%E6%B7%BB%E5%8A%A0SSL%E8%AF%81%E4%B9%A6/"},{"title":"在Ubuntu 18.04版本上正确配置防火墙","text":"这篇博客将介绍如何在Ubuntu 18.04版本上配置防火墙。 UFW介绍UFW是Uncomplicated Firewall的缩写，是Ubuntu系统上默认的防火墙组件。常用的命令有： 打开防火墙： ufw enable 关闭防火墙： ufw disable 显示防火墙状态： ufw status 查看防火墙详细状态： ufw status verbose 使用IPv6打开配置文件： sudo nano /etc/default/ufw确保IPV6的值为yes。 重置防火墙默认情况下，防火墙的设置是拒绝所有传入连接并允许所有传出连接。 想要重置防火墙为默认，可使用命令： sudo ufw default deny incoming sudo ufw default allow outgoing允许SSH连接SSH监听的端口是22，可通过以下命令来允许SSH连接： sudo ufw allow ssh或： sudo ufw allow 22允许HTTP/HTTPS连接通常情况下，可以直接通过允许Apache Full（一种Apache的应用程序配置文件）来配置HTTP/HTTPS端口。 查看UFW是否具有Apache Full： sudo ufw app list如果在Available applications里显示有Apache Full，则通过以下命令查看Apache Full的详情： sudo ufw app info &quot;Apache Full&quot;然后允许HTTP/HTTPS的连接： sudo ufw allow in &quot;Apache Full&quot;如果没有Apache Full，则可以通过允许HTTP和HTTPS各自监听的端口配置连接： HTTP监听的端口为80: sudo ufw allow 80 HTTPS监听的端口为443: sudo ufw allow 443 删除规则（Rules）以删除HTTP为例： sudo ufw delete allow http或： sudo ufw delete allow 80防火墙是如何知道HTTP的端口的呢？防火墙是如何知道命令： sudo ufw allow http里http的端口就是80的呢？ 是因为在/etc/services文件里已经把http的端口申明为80了。 Reference[1] B. Boucheron, “How To Set Up a Firewall with UFW on Ubuntu 18.04,” DigitalOcean, 05-Jul-2018. [Online]. Available: https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-18-04.","link":"/2020/04/29/%E5%9C%A8Ubuntu-18-04%E7%89%88%E6%9C%AC%E4%B8%8A%E6%AD%A3%E7%A1%AE%E9%85%8D%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99/"},{"title":"解决Ubuntu上AH00558的错误提示","text":"这篇博客将介绍如何解决Ubuntu上AH00558的错误提示。 有时候当重启服务器的时候会遇到AH00558的错误： AH00558: apache2: Could not reliably determine the server&apos;s fully qualified domain name, using 127.0.1.1. Set the &apos;ServerName&apos; directive globally to suppress this message这条错误提示是因为ServerName并没有设置为全局变量，解决方法为： 打开apache2.conf文件： sudo nano /etc/apache2/apache2.conf 在合适的位置添加以下代码： ServerName localhost 重启即可解决该问题。 Reference[1] B. Boucheron, “How To Create a Self-Signed SSL Cert for Apache in Ubuntu 18.04,” DigitalOcean, 05-Jul-2018. [Online]. Available: https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04. [2] A. Clemence, “‘Could not reliably determine the server’s fully qualified domain name, using 127.0.1.1 for ServerName’ Error on Ubuntu,” DEV Community, 11-Jan-2020. [Online]. Available: https://dev.to/ayekpleclemence/could-not-reliably-determine-the-server-s-fully-qualified-domain-name-using-127-0-1-1-for-servername-error-on-ubuntu-4gc9.","link":"/2020/04/29/%E8%A7%A3%E5%86%B3Apache%E4%B8%8AAH00558%E7%9A%84%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA/"},{"title":"React Learning: Using Router Show 404 Page","text":"This bug happened when refreshing the page because the server is not configured. Solution: Enabling mod_rewrite enable mod_rewrite: sudo a2enmod rewrite then restart Apache: sudo systemctl restart apache2 Setting Up .htaccess first add rewrite rules: sudo nano /etc/apache2/sites-available/000-default.conf or if you have https configured: sudo nano /etc/apache2/sites-available/default-ssl.conf and add the following new block(port is 80 or 443): &lt;VirtualHost *:80&gt; &lt;Directory /var/www/html&gt; Options Indexes FollowSymLinks MultiViews AllowOverride All Require all granted &lt;/Directory&gt; . . . &lt;/VirtualHost&gt; finally restart Apache: sudo systemctl restart apache2 Creating .htaccess Create the following .htaccess file in the root of web project: Options -MultiViews RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ index.html [QSA,L] Refernce:https://stackoverflow.com/questions/51357947/react-app-on-server-while-refreshing-the-page-shows-404-page","link":"/2020/06/08/React-Learning-Using-Router-Show-404-Page/"},{"title":"React Useful Hooks: useIsMountedRef","text":"This hook helps us handle the clean up function in useEffect.Source: https://www.debuggr.io/react-update-unmounted-component/ Usagefunction SomeComponent() { const isMountedRef = useIsMountedRef(); useEffect(() =&gt; { // do something ... if(isMountedRef.current){ // do subscription or state update ... } // do something ... }, [isMountedRef]); return ( // return something ... ); }Hookfunction useIsMountedRef(){ const isMountedRef = useRef(null); useEffect(() =&gt; { isMountedRef.current = true; return () =&gt; isMountedRef.current = false; }); return isMountedRef; }","link":"/2020/06/16/React-Useful-Hooks-useIsMountedRef/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","link":"/tags/Algorithm/"},{"name":"Biocomputation - ANN","slug":"Biocomputation-ANN","link":"/tags/Biocomputation-ANN/"},{"name":"React","slug":"React","link":"/tags/React/"},{"name":"Hooks","slug":"Hooks","link":"/tags/Hooks/"},{"name":"Bug","slug":"Bug","link":"/tags/Bug/"},{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"UI","slug":"UI","link":"/tags/UI/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"Apache","slug":"Apache","link":"/tags/Apache/"}],"categories":[{"name":"Learning Notes","slug":"Learning-Notes","link":"/categories/Learning-Notes/"},{"name":"Algorithm","slug":"Learning-Notes/Algorithm","link":"/categories/Learning-Notes/Algorithm/"},{"name":"Biocomputation - ANN","slug":"Learning-Notes/Biocomputation-ANN","link":"/categories/Learning-Notes/Biocomputation-ANN/"},{"name":"React","slug":"React","link":"/categories/React/"},{"name":"Notes","slug":"React/Notes","link":"/categories/React/Notes/"},{"name":"Useful Hooks","slug":"React/Useful-Hooks","link":"/categories/React/Useful-Hooks/"},{"name":"UI Library","slug":"React/UI-Library","link":"/categories/React/UI-Library/"},{"name":"Operations","slug":"Operations","link":"/categories/Operations/"}]}